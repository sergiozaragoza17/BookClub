<div class="modal fade" id="reviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Write a Review for {{ book.title }}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                {{ form_start(reviewForm, {'attr': {'id': 'review-form'}}) }}

                {{ form_row(reviewForm.content) }}

                <div class="mb-3">
                    <label class="form-label">Rating</label>
                    {{ form_widget(reviewForm.rating, { 'attr': { 'id': 'review_rating', 'class': 'd-none' } }) }}
                    <div id="star-container" class="mb-3">
                        {% for i in 1..5 %}
                            <i class="bi bi-star fs-3 text-secondary star" data-value="{{ i }}" style="cursor: pointer;"></i>
                        {% endfor %}
                    </div>
                </div>

                {{ form_rest(reviewForm) }}

                <button type="submit" class="btn btn-success">Save changes</button>
                {{ form_end(reviewForm) }}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        function setupNewReviewStars() {
            const stars = document.querySelectorAll('#star-container .star');
            const ratingInput = document.getElementById('review_rating');

            if (!stars.length || !ratingInput) return;

            let currentRating = parseInt(ratingInput.value) || 0;

            const highlightStars = (rating) => {
                stars.forEach(star => {
                    const starValue = parseInt(star.getAttribute('data-value'));
                    if (starValue <= rating) {
                        star.classList.remove('text-secondary', 'bi-star');
                        star.classList.add('text-warning', 'bi-star-fill');
                    } else {
                        star.classList.remove('text-warning', 'bi-star-fill');
                        star.classList.add('text-secondary', 'bi-star');
                    }
                });
            };

            highlightStars(currentRating);

            stars.forEach(star => {
                star.addEventListener('click', function() {
                    currentRating = parseInt(this.getAttribute('data-value'));
                    ratingInput.value = currentRating;
                    highlightStars(currentRating);
                });

                star.addEventListener('mouseover', function() {
                    highlightStars(parseInt(this.getAttribute('data-value')));
                });

                star.addEventListener('mouseout', function() {
                    highlightStars(currentRating);
                });
            });
        }

        setupNewReviewStars();
    });
</script>